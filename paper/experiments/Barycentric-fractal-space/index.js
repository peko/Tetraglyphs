// Generated by CoffeeScript 1.4.0
(function() {
  var Dharma, S3, TR, Ta, Tr, colors, dharma,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  TR = 1.0;

  Tr = TR / 2.0;

  S3 = Math.sqrt(3.0);

  Ta = TR * S3;

  colors = [0xEE2244, 0x88CC44, 0x4488EE, 0xEE8844];

  Dharma = (function() {

    function Dharma() {
      this.onMouseMove = __bind(this.onMouseMove, this);

      this.onMouseDown = __bind(this.onMouseDown, this);

      this.render = __bind(this.render, this);

    }

    Dharma.prototype.init = function() {
      this.W = window.innerWidth;
      this.H = window.innerHeight;
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(45, this.W / this.H, 1, 1000);
      this.camera.position.y = 0;
      this.camera.position.z = 400;
      this.renderer = new THREE.CanvasRenderer();
      this.renderer.setSize(this.W, this.H);
      this.renderer.domElement.addEventListener('mousemove', this.onMouseMove, false);
      this.renderer.domElement.addEventListener('mousedown', this.onMouseDown, false);
      this.projector = new THREE.Projector();
      this.mouse = new THREE.Vector3();
      this.scene.add(new THREE.AmbientLight(0x444444));
      this.scene.add(this.lineTriangles = new THREE.Object3D);
      this.scene.add(this.faceTriangles = new THREE.Object3D);
      this.faces = {};
      document.body.appendChild(this.renderer.domElement);
      return this.render();
    };

    Dharma.prototype.c2b = function(p, a, b, c) {
      var ac, bc, d, pc, u, v, w;
      ac = {
        x: a.x - c.x,
        y: a.y - c.y
      };
      bc = {
        x: b.x - c.x,
        y: b.y - c.y
      };
      pc = {
        x: p.x - c.x,
        y: p.y - c.y
      };
      d = bc.y * ac.x - bc.x * ac.y;
      u = (bc.y * pc.x - bc.x * pc.y) / d;
      v = (ac.x * pc.y - ac.y * pc.x) / d;
      w = 1 - u - v;
      return {
        u: u,
        v: v,
        w: w
      };
    };

    Dharma.prototype.getTriangles = function(z, p, a, b, c, T, H) {
      var ab, bc, br, ca;
      if (T == null) {
        T = null;
      }
      if (H == null) {
        H = null;
      }
      z = z >> 1;
      if (z === 0) {
        return T;
      }
      br = this.c2b(p, a, b, c);
      if (br.u > 0 && br.v > 0 && br.w > 0) {
        if (T == null) {
          T = {};
        }
        if (H == null) {
          H = 0x4;
        }
        T[H] = [a, b, c];
        ab = {
          x: (a.x + b.x) / 2,
          y: (a.y + b.y) / 2
        };
        bc = {
          x: (b.x + c.x) / 2,
          y: (b.y + c.y) / 2
        };
        ca = {
          x: (c.x + a.x) / 2,
          y: (c.y + a.y) / 2
        };
        if (br.u <= 1 / 2 && br.v <= 1 / 2 && br.w <= 1 / 2) {
          this.getTriangles(z, p, ab, bc, ca, T, H << 2 | 0x0);
        }
        if (br.u > 1 / 2) {
          this.getTriangles(z, p, a, ab, ca, T, H << 2 | 0x1);
        }
        if (br.v > 1 / 2) {
          this.getTriangles(z, p, ab, b, bc, T, H << 2 | 0x2);
        }
        if (br.w > 1 / 2) {
          this.getTriangles(z, p, ca, bc, c, T, H << 2 | 0x3);
        }
      }
      return T;
    };

    Dharma.prototype.render = function() {
      requestAnimationFrame(this.render);
      return this.renderer.render(this.scene, this.camera);
    };

    Dharma.prototype.onMouseDown = function(e) {
      var a, b, c, cid, h, m, o, t, triangles, x0, y0, z, _i, _ref, _results;
      e.preventDefault();
      m = new THREE.Vector3;
      m.x = (e.clientX / window.innerWidth) * 2 - 1;
      m.y = -(e.clientY / window.innerHeight) * 2 + 1;
      m.z = 0.5;
      this.projector.unprojectVector(m, this.camera);
      o = this.camera.position;
      x0 = o.z * m.x / (o.z - m.z);
      y0 = o.z * m.y / (o.z - m.z);
      z = 512;
      a = {
        x: 0,
        y: TR * z
      };
      b = {
        x: Ta / 2 * z,
        y: -Tr * z
      };
      c = {
        x: -Ta / 2 * z,
        y: -Tr * z
      };
      for (cid = _i = _ref = this.faceTriangles.children.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; cid = _ref <= 0 ? ++_i : --_i) {
        this.faceTriangles.remove(this.faceTriangles.children[cid]);
      }
      triangles = this.getTriangles(z, {
        x: x0,
        y: y0
      }, a, b, c);
      z = -1.0;
      cid = 0;
      _results = [];
      for (h in triangles) {
        t = triangles[h];
        if (!this.faces[h]) {
          _results.push(this.faceTriangles.add(this.faces[h] = this.createFaceTriangle(t[0], t[1], t[2], z += 0.1, cid = ++cid % colors.length)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Dharma.prototype.onMouseMove = function(e) {
      var a, b, c, cid, h, m, o, t, triangles, x0, y0, z, _i, _len, _ref, _results;
      e.preventDefault();
      m = new THREE.Vector3;
      m.x = (e.clientX / window.innerWidth) * 2 - 1;
      m.y = -(e.clientY / window.innerHeight) * 2 + 1;
      m.z = 0.5;
      this.projector.unprojectVector(m, this.camera);
      o = this.camera.position;
      x0 = o.z * m.x / (o.z - m.z);
      y0 = o.z * m.y / (o.z - m.z);
      z = 512;
      a = {
        x: 0,
        y: TR * z
      };
      b = {
        x: Ta / 2 * z,
        y: -Tr * z
      };
      c = {
        x: -Ta / 2 * z,
        y: -Tr * z
      };
      _ref = this.lineTriangles.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        this.lineTriangles.remove(t);
      }
      this.lineTriangles.children = [];
      triangles = this.getTriangles(z, {
        x: x0,
        y: y0
      }, a, b, c);
      cid = 0;
      _results = [];
      for (h in triangles) {
        t = triangles[h];
        _results.push(this.lineTriangles.add(this.createLineTriangle(t[0], t[1], t[2], 1.0)));
      }
      return _results;
    };

    Dharma.prototype.createLineTriangle = function(a, b, c, z) {
      var geom;
      if (z == null) {
        z = 0.0;
      }
      geom = new THREE.Geometry();
      geom.vertices.push(new THREE.Vector3(a.x, a.y, z));
      geom.vertices.push(new THREE.Vector3(b.x, b.y, z));
      geom.vertices.push(new THREE.Vector3(c.x, c.y, z));
      geom.vertices.push(new THREE.Vector3(a.x, a.y, z));
      return new THREE.Line(geom, new THREE.LineBasicMaterial({
        color: 0xEEEEEE,
        opacity: 0.5
      }));
    };

    Dharma.prototype.createFaceTriangle = function(a, b, c, z, cid) {
      var geom;
      if (z == null) {
        z = 0.0;
      }
      if (cid == null) {
        cid = 0;
      }
      geom = new THREE.Geometry();
      geom.vertices.push(new THREE.Vector3(a.x, a.y, z));
      geom.vertices.push(new THREE.Vector3(c.x, c.y, z));
      geom.vertices.push(new THREE.Vector3(b.x, b.y, z));
      geom.faces.push(new THREE.Face3(0, 1, 2));
      geom.computeFaceNormals();
      return new THREE.Mesh(geom, new THREE.MeshBasicMaterial({
        color: colors[cid],
        opacity: 0.5
      }));
    };

    return Dharma;

  })();

  dharma = new Dharma;

  dharma.init();

}).call(this);
